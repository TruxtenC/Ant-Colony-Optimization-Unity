//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Ant Colony Pathing"",
            ""id"": ""50298c9c-e0a7-44fa-aae1-596916754adf"",
            ""actions"": [
                {
                    ""name"": ""Spawn Point"",
                    ""type"": ""Button"",
                    ""id"": ""86b528f4-efb3-4867-a7b2-61e5a9d77f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clear Points"",
                    ""type"": ""Button"",
                    ""id"": ""54e05b85-61f7-4ae1-a5d1-115342d79029"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spawn Points"",
                    ""type"": ""Button"",
                    ""id"": ""c0fa6220-a87b-48b6-83e0-b7338004482c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FindPath"",
                    ""type"": ""Button"",
                    ""id"": ""ce740642-408b-474f-8fdf-04efa829b4cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e94f3af1-da6e-42d9-84ba-3e57654ecfa0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61dd46df-9ffd-41af-891a-e89c9a896dbc"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clear Points"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""721ee6b3-2db2-4442-bdee-0281d5239a15"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Points"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9a58480-509e-4717-b15f-7544d6160f96"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FindPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Ant Colony Pathing
        m_AntColonyPathing = asset.FindActionMap("Ant Colony Pathing", throwIfNotFound: true);
        m_AntColonyPathing_SpawnPoint = m_AntColonyPathing.FindAction("Spawn Point", throwIfNotFound: true);
        m_AntColonyPathing_ClearPoints = m_AntColonyPathing.FindAction("Clear Points", throwIfNotFound: true);
        m_AntColonyPathing_SpawnPoints = m_AntColonyPathing.FindAction("Spawn Points", throwIfNotFound: true);
        m_AntColonyPathing_FindPath = m_AntColonyPathing.FindAction("FindPath", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ant Colony Pathing
    private readonly InputActionMap m_AntColonyPathing;
    private IAntColonyPathingActions m_AntColonyPathingActionsCallbackInterface;
    private readonly InputAction m_AntColonyPathing_SpawnPoint;
    private readonly InputAction m_AntColonyPathing_ClearPoints;
    private readonly InputAction m_AntColonyPathing_SpawnPoints;
    private readonly InputAction m_AntColonyPathing_FindPath;
    public struct AntColonyPathingActions
    {
        private @InputManager m_Wrapper;
        public AntColonyPathingActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnPoint => m_Wrapper.m_AntColonyPathing_SpawnPoint;
        public InputAction @ClearPoints => m_Wrapper.m_AntColonyPathing_ClearPoints;
        public InputAction @SpawnPoints => m_Wrapper.m_AntColonyPathing_SpawnPoints;
        public InputAction @FindPath => m_Wrapper.m_AntColonyPathing_FindPath;
        public InputActionMap Get() { return m_Wrapper.m_AntColonyPathing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AntColonyPathingActions set) { return set.Get(); }
        public void SetCallbacks(IAntColonyPathingActions instance)
        {
            if (m_Wrapper.m_AntColonyPathingActionsCallbackInterface != null)
            {
                @SpawnPoint.started -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnSpawnPoint;
                @SpawnPoint.performed -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnSpawnPoint;
                @SpawnPoint.canceled -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnSpawnPoint;
                @ClearPoints.started -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnClearPoints;
                @ClearPoints.performed -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnClearPoints;
                @ClearPoints.canceled -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnClearPoints;
                @SpawnPoints.started -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnSpawnPoints;
                @SpawnPoints.performed -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnSpawnPoints;
                @SpawnPoints.canceled -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnSpawnPoints;
                @FindPath.started -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnFindPath;
                @FindPath.performed -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnFindPath;
                @FindPath.canceled -= m_Wrapper.m_AntColonyPathingActionsCallbackInterface.OnFindPath;
            }
            m_Wrapper.m_AntColonyPathingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpawnPoint.started += instance.OnSpawnPoint;
                @SpawnPoint.performed += instance.OnSpawnPoint;
                @SpawnPoint.canceled += instance.OnSpawnPoint;
                @ClearPoints.started += instance.OnClearPoints;
                @ClearPoints.performed += instance.OnClearPoints;
                @ClearPoints.canceled += instance.OnClearPoints;
                @SpawnPoints.started += instance.OnSpawnPoints;
                @SpawnPoints.performed += instance.OnSpawnPoints;
                @SpawnPoints.canceled += instance.OnSpawnPoints;
                @FindPath.started += instance.OnFindPath;
                @FindPath.performed += instance.OnFindPath;
                @FindPath.canceled += instance.OnFindPath;
            }
        }
    }
    public AntColonyPathingActions @AntColonyPathing => new AntColonyPathingActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IAntColonyPathingActions
    {
        void OnSpawnPoint(InputAction.CallbackContext context);
        void OnClearPoints(InputAction.CallbackContext context);
        void OnSpawnPoints(InputAction.CallbackContext context);
        void OnFindPath(InputAction.CallbackContext context);
    }
}
